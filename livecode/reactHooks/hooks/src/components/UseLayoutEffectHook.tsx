import React, { useEffect, useLayoutEffect, useState } from "react";

const UseLayoutEffectHook: React.FC = () => {
  const [name, setName] = useState("Nome inicial");
  const [boxWidth, setBoxWidth] = useState(100);

  // üîπ useLayoutEffect √© executado SINCRONAMENTE,
  // logo ap√≥s o React atualizar o DOM, mas antes da tela ser "pintada" para o usu√°rio.
  // Isso significa que qualquer altera√ß√£o feita aqui √© aplicada antes da p√°gina ser exibida,
  // evitando "piscar" ou layout incorreto.
  useLayoutEffect(() => {
    console.log("1Ô∏è‚É£ useLayoutEffect rodou");
    // Simula um ajuste de layout: antes de o usu√°rio ver a tela,
    // aumentamos a largura da caixa.
    if (boxWidth === 100) {
      setBoxWidth(300);
      setName("Ajustando layout antes da pintura");
    }
  }, [boxWidth]);

  // üîπ useEffect √© executado ASSINCRONAMENTE,
  // ou seja, depois que a tela j√° foi renderizada e mostrada ao usu√°rio.
  useEffect(() => {
    console.log("2Ô∏è‚É£ useEffect rodou");
    // Atualiza√ß√£o feita ap√≥s a renderiza√ß√£o vis√≠vel
    const timeout = setTimeout(() => {
      setName("Atualizado ap√≥s renderizar");
    }, 1000);

    return () => clearTimeout(timeout);
  }, []);

  console.log("üîç Renderizou com nome:", name);

  return (
    <div style={{ padding: "2rem" }}>
      <h1>useLayoutEffect</h1>
      <ul>
        <li>O <b>useLayoutEffect</b> √© semelhante ao <b>useEffect</b>.</li>
        <li>A diferen√ßa √© que ele executa <b>antes</b> da tela ser exibida ao usu√°rio.</li>
        <li>Ele √© <b>s√≠ncrono</b> ‚Äî o React espera sua execu√ß√£o terminar antes de mostrar o resultado.</li>
        <li>Ideal para medir ou ajustar o layout antes da renderiza√ß√£o final.</li>
      </ul>

      <div
        style={{
          background: "#90caf9",
          height: "80px",
          width: `${boxWidth}px`,
          transition: "width 0.5s",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          marginTop: "1rem",
          borderRadius: "8px",
        }}
      >
        <strong>{name}</strong>
      </div>

      <hr style={{ marginTop: "2rem" }} />
    </div>
  );
};

export default UseLayoutEffectHook;
